---
- name: install packages
  yum: name={{ item }} state=present
  with_items: "{{ compass_packages }}"
  tags:
    - elk

- name: auto set java env
  copy: src={{ item }} dest=/etc/profile.d/{{ item }} mode=0755
  with_items:
    - jdk.csh
    - jdk.sh
  tags:
    - elk

- name: set java env
  shell: /etc/profile.d/jdk.sh
  tags:
    - elk

- name: copy elasticsearch config
  copy: src=elasticsearch.yml dest=/etc/elasticsearch/elasticsearch.yml
  tags:
    - elk

- name: copy kibana config
  copy: src=kibana.yml dest=/opt/kibana/config/kibana.yml
  tags:
    - elk

- name: copy kibana service scripts
  copy: src=kibana-4.x-init dest=/etc/init.d/kibana mode=0755
  tags:
    - elk

- name: copy kibana autostart scripts
  copy: src=kibana-4.x-default dest=/etc/default/kibana
  tags:
    - elk

- name : modify kibana api base url
  shell: sed -i "s/api\/status/app\/kibana\/api\/status/g" /opt/kibana/optimize/bundles/statusPage.bundle.js
  tags: 
    - elk

- name: copy logstash config
  copy: src={{ item }} dest=/etc/logstash/conf.d/{{ item }}
  with_items:
    - ansible.conf
    - compass.conf
    - messages.conf
  tags:
    - elk

- name: create logstash patterns directory
  file: path=/opt/logstash/patterns state=directory
  tags:
    - elk

- name: copy logstash patten
  copy: src={{ item }} dest=/opt/logstash/patterns/{{ item }}
  with_items:
    - ansible.pat
  tags:
    - elk

- name: copy httpd config
  copy: src={{ item }} dest=/etc/httpd/conf.d/{{ item }}
  with_items:
    - ods-server.conf
    - http_pip.conf
    - images.conf
    - packages.conf
    - elk.conf
  notify:
    restart http service

- meta: flush_handlers

- name: stop iptables
  service: name=firewalld state=stopped enabled=no

# TODO: currently compass use root user and group, apache has to
# be in root group to write wsgi logs in /var/log/compass/, need
# to run compass as its own user in the future.
# - name: append compass group to apache user groups
#  user: name=apache groups=root append=yes

#- name: start elasticsearch
#  service: name=elasticsearch state=started enabled=yes
#  tags:
#    - elk
#
#- name: start logstash
#  service: name=logstash state=started enabled=yes
#  tags:
#    - elk
#
#- name: start kibana
#  service: name=kibana state=started enabled=yes
#  tags:
#    - elk

- name: start mysqld
  service: name=mysqld state=started enabled=yes

- name: start rabbitmq server
  service: name=rabbitmq-server state=started enabled=yes

- name: initialize mysql password
  mysql_user: user={{ compass_db_user }} password={{ compass_db_pass }}
              priv=compass.*:ALL,GRANT state=present

- name: create compass database
  mysql_db: name=compass state=present

- name: install setuptools
  shell: |
    cd /var/www/pip
    version=`ls setuptools* | sed -e "s/setuptools-//" -e "s/.zip//g"`
    python ez_setup.py --download-base file:// --version $version
    cd -

- name: install pip
  shell: easy_install `ls /var/www/pip/pip-*.tar.gz`

- name: create pip config directory
  file: path=~/.pip state=directory

- name: update pip.conf
  copy: src=pip.conf dest=~/.pip/pip.conf

- name: install pip package
  pip: name={{ item }}
  with_items:
    - lazypy
    - virtualenv
    - ansible
    - pycrypto-on-pypi

- name: pip install compass into virtualenv
  pip: name={{ COMPASS_PATH }} virtualenv={{ COMPASS_PATH }}/venv

- name: create compass directories
  file: path={{ item }} state=directory
  with_items:
    - /etc/compass
    - /opt/compass/bin
    - /var/www/compass
    - /var/www/compass_web
    - /var/www/compass_web/v2.5

- name: create /var/log/compass
  file: path=/var/log/compass mode=0777 state=directory

- name: create ansible folder
  file: path=/var/ansible/run state=directory
  when: "'ansible' in '{{ pkg_installer }}'"

- name: copy ansible scripts into ansible folder
  shell: |
    for i in `ls /opt/compass-adapters/ansible/ | grep "openstack_"`; do
        mkdir -p /var/ansible/$i
        cp -rf /opt/compass-adapters/ansible/openstack/* /var/ansible/$i
        cp -rf /opt/compass-adapters/ansible/$i /var/ansible/
    done
  when: "'ansible' in '{{ pkg_installer }}'"

- name: copy ansible roles into ansible folder
  shell: cp -rf /opt/compass-adapters/ansible/roles /var/ansible/
  when: "'ansible' in '{{ pkg_installer }}'"

- name: write python home into switch virtualenv
  lineinfile: dest={{ COMPASS_PATH }}/bin/switch_virtualenv.py.template
              regexp="^virtual\_env\ \=\ \'\$PythonHome\'"
              line="virtual_env = '/opt/compass-core/venv'"
# "

- name: rename switch_virtualenv template
  command: cp {{ COMPASS_PATH }}/bin/switch_virtualenv.py.template {{ COMPASS_PATH }}/bin/switch_virtualenv.py

- name: copy compass config files
  shell: cp -rf {{ COMPASS_PATH }}/conf/* /etc/compass/

- name: copy service init file
  shell: cp -rf {{ COMPASS_PATH }}/service/* /etc/init.d/

- name: copy compass bin file
  shell: cp -rf {{ COMPASS_PATH }}/bin/*.py /opt/compass/bin/

- name: copy compass shell script
  shell: cp -rf {{ COMPASS_PATH }}/bin/*.sh /opt/compass/bin/

- name: copy compass ansible callback
  shell: cp -rf {{ COMPASS_PATH }}/bin/ansible_callbacks /opt/compass/bin/

- name: copy compass executable
  shell: cp {{ COMPASS_PATH }}/bin/compassd /usr/bin/

- name: link compass check
  file: src=/opt/compass/bin/compass_check.py dest=/usr/bin/compass state=link

- name: link compass wsgi
  file: src=/opt/compass/bin/compass_wsgi.py dest=/var/www/compass/compass.wsgi state=link

- name: change celery env
  shell: echo "export C_FORCE_ROOT=1" > /etc/profile.d/celery_env.sh

- name: change file mode
  file: path=/etc/profile.d/celery_env.sh mode=0755

- name: add compass setting
  template: src=compass.setting.j2 dest=/etc/compass/setting
  notify:
    - restart compass service
    - restart http service

- name: add cobbler setting
  template: src=cobbler.conf.nodocker.j2 dest=/etc/compass/os_installer/cobbler.conf
  notify:
    - restart compass service
    - restart http service

- name: link celery bin file
  file: src={{ COMPASS_PATH }}/venv/bin/celery dest=/opt/compass/bin/celery state=link
  notify:
    - restart compass service
    - restart http service

- name: create redis folders
  file: path={{ item }} state=directory owner=redis group=root
  with_items:
    - /var/log/redis
    - /var/lib/redis
    - /var/run/redis

- name: make sure redis service not running
  command: killall -9 redis-server
  ignore_errors: yes

- name: restart redis service
  service: name=redis state=restarted enabled=yes

- name: initialize db for compass
  shell: /opt/compass/bin/manage_db.py createdb
  run_once: True

- name: copy web ui files
  shell: cp -rf /opt/compass-web/v2.5/target/* /var/www/compass_web/v2.5/

- name: create switch file if test mode enabled
  template: src=switch_machines_file.j2
            dest=/etc/compass/switch_machines_file
  when: test is defined and test == True
  tags: switch_machine

- name: install keyczar for accelerate
  pip: name=python-keyczar state=present extra_args='--pre'

- name: inject switches and mac addresses
  shell: /opt/compass/bin/manage_db.py set_switch_machines --switch_machines_file /etc/compass/switch_machines_file
  when: test is defined and test == True
  tags: switch_machine
#- name: run compass check
#  command: compass check
